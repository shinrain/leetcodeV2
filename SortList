SortList

Sort a linked list in O(n log n) time using constant space complexity.
---
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
 	public static ListNode merge(ListNode n1, ListNode n2)
 	{
 		if(n1==null) return n2;
 		if(n2==null) return n1;

 		ListNode head = null, tail = null;
 		while(n1!=null && n2!=null)
 		{
 			if(n1.val <=n2.val)
 			{
 				if(tail == null)
 				{
 					head = n1;
 					tail = head;
 					n1 = n1.next;
 					tail.next = null;
 				}
 				else
 				{
 					tail.next = n1;
 					tail = n1;
 					n1=n1.next;
 					tail.next = null;
 				}
 			}
 			else
 			{

 				if(tail == null)
 				{
 					head = n2;
 					tail = head;
 					n2 = n2.next;
 					tail.next = null;
 				}
 				else
 				{
 					tail.next = n2;
 					tail = n2;
 					n2=n2.next;
 					tail.next = null;
 				}
 			
 			}
 		}
 		if(n1!=null)
 		{
 			tail.next = n1;
 		}
 		if(n2!=null)
 		{
 			tail.next = n2;
 		}
 		return head;
 	}

    public static ListNode sortList(ListNode head) {
        if(head == null || head.next == null) return head;

        int count =0;
        ListNode l = head, r = head;
        while(l.next!=null)
        {
        	count++;
        	l = l.next;
        	if(count%2==0) r = r.next;
        }
        l = r.next;
        r.next = null;
        return merge(sortList(head), sortList(l));
    }
}
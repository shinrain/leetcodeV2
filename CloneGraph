CloneGraph

Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
---
/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
	public UndirectedGraphNode cloneGraph(UndirectedGraphNode node, HashMap<UndirectedGraphNode, UndirectedGraphNode> map)
	{
		if(node == null) return null;
		if(map.containsKey(node)) return map.get(node);

		UndirectedGraphNode nd = new UndirectedGraphNode(node.label);
		map.put(node, nd);
		for(UndirectedGraphNode N : node.neighbors)
		{
			nd.neighbors.add(cloneGraph(N,map));
		}
		return nd;
	}

    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node)
    {
    	return cloneGraph(node, new HashMap<UndirectedGraphNode, UndirectedGraphNode>());
    }

}


----
public class Solution {


    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node)
    {

		if(node == null) return null;

		HashMap<UndirectedGraphNode, UndirectedGraphNode> map = 
			new HashMap<UndirectedGraphNode, UndirectedGraphNode>();

		LinkedList<UndirectedGraphNode> q = new LinkedList<UndirectedGraphNode>();

		q.addLast(node);
		map.put(node, new UndirectedGraphNode(node.label));

		while(!q.isEmpty())
		{
			UndirectedGraphNode cur = q.removeFirst();
			for(UndirectedGraphNode l:cur.neighbors)
			{
				if(!map.containsKey(l))
				{
					UndirectedGraphNode neighbor = new UndirectedGraphNode(l.label);
					map.get(cur).neighbors.add(neighbor);
					map.put(l,neighbor);
					q.addLast(l);
				}
				else
				{
					map.get(cur).neighbors.add(map.get(l));
				}
			}
		}
		return map.get(node);
	 }
}

---

public class Solution {


    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node)
    {

		if(node == null) return null;

		HashMap<UndirectedGraphNode, UndirectedGraphNode> map = 
			new HashMap<UndirectedGraphNode, UndirectedGraphNode>();

		Stack<UndirectedGraphNode> q = new Stack<UndirectedGraphNode>();

		UndirectedGraphNode cp = new UndirectedGraphNode(node.label);
		map.put(node, cp);

		q.push(node);
		while(!q.isEmpty())
		{
			UndirectedGraphNode cur = q.pop();

			for(UndirectedGraphNode l:cur.neighbors)
			{
				if(!map.containsKey(l))
				{
					UndirectedGraphNode ll = new UndirectedGraphNode(l.label);
					map.put(l,ll);
					map.get(cur).neighbors.add(ll);
					q.push(l);
				}
				else
				{
					map.get(cur).neighbors.add(map.get(l));
				}
			}
		}

		return map.get(node);
    }
}
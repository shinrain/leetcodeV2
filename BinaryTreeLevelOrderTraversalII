BinaryTreeLevelOrderTraversalII

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

---
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        List<List<Integer>> re = new ArrayList<List<Integer>>();
     	if(root == null) return re;

     	List<TreeNode> prev = new ArrayList<TreeNode>();
     	prev.add(root);
     	List<Integer> r = new ArrayList<Integer>();
     	r.add(root.val);
     	re.add(0, r);
     	while(prev.size()!=0)
     	{
     		List<TreeNode> cur = new ArrayList<TreeNode>();
			r = new ArrayList<Integer>();
     		for(TreeNode nd : prev)
     		{
     			if(nd.left!=null)
     			{
     				cur.add(nd.left);
     				r.add(nd.left.val);	
     			}
     			if(nd.right!=null){
     				cur.add(nd.right);
     				r.add(nd.right.val);	
     			} 
     		}
     		prev = cur;
     		if(r.size()!=0) re.add(0,r);		
     	}
		return re;
    
        
    }
}
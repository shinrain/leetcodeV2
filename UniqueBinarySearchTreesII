UniqueBinarySearchTreesII

Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
---

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {

	public static List<TreeNode> generateTrees(HashMap<Integer, List<TreeNode>> map,int l, int r, int n) {
			int key = l*n+r;
			if(map.containsKey(key)) return map.get(key);

			List<TreeNode> re = new ArrayList<TreeNode>();
			if(l>r) return re;
			if(l==r)
			{
				TreeNode root = new TreeNode(l);
				re.add(root);
			}
			for(int i=l;i<=r;i++)
			{
				List<TreeNode> left = generateTrees(map, l, i-1, n);
				List<TreeNode> right = generateTrees(map, i+1, r, n);
				if(left.size() == 0)
				{
					for(TreeNode nd : right)
					{
						TreeNode root = new TreeNode(i);
						root.right = nd;
						re.add(root);
					}
				}
				else if(right.size() == 0)
				{
					for(TreeNode nd: left)
					{
						TreeNode root = new TreeNode(i);
						root.left	= nd;
						re.add(root);
					}
				}
				else
				{
					for(TreeNode lnd:left)
					{
						for(TreeNode rnd:right)
						{
							TreeNode root = new	TreeNode(i);
							root.left = lnd;
							root.right = rnd;
							re.add(root);
						}
					}
				}
			}
			map.put(key, re);
			return re;
	}
    public static List<TreeNode> generateTrees(int n) {
        List<TreeNode> re = new ArrayList<TreeNode>();
                if(n==0){
        	re.add(null);
        	return re;
        } 
        if(n==1)
    	{
    		TreeNode root = new TreeNode(1);
			re.add(root);
			return re;
    	}

 
        return generateTrees(new HashMap<Integer, List<TreeNode>>(), 1, n,n);

    }
}
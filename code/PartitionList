PartitionList

Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
--
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode partition(ListNode head, int x) {
        
        if(head == null) return null;
        ListNode less = null, lTail = null, rTail = null;
        ListNode cur = head;
        head = null;

        while(cur!=null)
        {
        	ListNode t = cur.next;
        	cur.next = null;
        	if(cur.val < x)
        	{
        		if(lTail == null)
        		{
        			less = cur;
        			lTail = cur;
        		}
        		else
        		{
        			lTail.next = cur;
        			lTail = cur;
        		}
        	}else
        	{
        		if(rTail == null)
        		{
        			head = cur;
        			rTail = cur;
        		}
        		else
        		{
        			rTail.next = cur;
        			rTail = cur;
        		}
        	}
        	cur = t;
        }
        if(lTail == null) return head;
        lTail.next = head;
        return less;
    
    }
}
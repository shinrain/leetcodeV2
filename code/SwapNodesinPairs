SwapNodesinPairs

Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

---

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
     
    	if(head == null || head.next == null) return head;

    	ListNode cur = head, tail = null;
    	head = null;

    	while(cur!=null && cur.next !=null)
    	{
    		ListNode t = cur.next.next;
    		cur.next.next = null;

    		if(head == null)
    		{
    			head = cur.next;
    			tail = cur;
    			head.next = tail;
    			tail.next = null;
    		}
    		else
    		{
    			tail.next = cur.next;
    			tail.next.next = cur;
    			cur.next = null;
    			tail = cur;
    		}
    		cur = t;
    	}
    	if(cur!=null) tail.next = cur;
    	return head;
    
    }
}
CountandSay

The count-and-say sequence is the sequence of integers beginning as follows:
1, 11, 21, 1211, 111221, ...

1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth sequence.

Note: The sequence of integers will be represented as a string

---
public class Solution {
    public String countAndSay(int n) {

    	if(n==0) return "";

    	ArrayList<Integer> re = new ArrayList<Integer>();
    	int count =0; 
    	int val = 1;
    	re.add(1);
    	for(int i=1;i<n;i++)
    	{
    		ArrayList<Integer> rr = new ArrayList<Integer>();
    		for(int j=0;j<re.size();j++)
    		{
    			if(re.get(j) == val) count++;
    			else
    			{
    				rr.add(count);
    				rr.add(val);
    				val = re.get(j);
    				count = 1;
    			}
    		}
    		rr.add(count);
    		rr.add(val);
    		val = rr.get(0);
    		count = 0;
    		re =rr;
    	}
    	String result = "";
    	for(int i:re)
    		result += Integer.toString(i);
    	return result;
    
    }
}

====

CLeaner solution:

    public String nextSolution(String s)
    {
        int n = s.length();
        if(n<=0) return "";

        char val = s.charAt(0);
        int count = 1;
        String re = "";
        for(int i=1;i<n;i++)
        {
            char c = s.charAt(i);
            if(c!=val)
            {
                re+=Integer.toString(count)+Integer.toString((int)(val-'0'));
                val = c; count = 1;
            }else
            {
                count++;
            }
        }
        re+=Integer.toString(count)+Integer.toString((int)(val-'0'));
        return re;
    }
    public String countAndSay(int n)
    {
        if(n<=0) return "";
        String s = "1";

        for(int i=1;i<n;i++)
        {
            s = nextSolution(s);
        }
        return s;
    }
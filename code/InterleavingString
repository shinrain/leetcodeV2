InterleavingString

Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

For example,
Given:
s1 = "aabcc",
s2 = "dbbca",

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

---
public class Solution {
    public int isInterleave(String s1, String s2, String s3, int[][] map)
    {

    	int m=s1.length();
    	int n=s2.length();

    	if(map[m][n] !=0) return map[m][n];

    	if(m+n!=s3.length())
    	{
    		map[m][n] = -1;
    	}
    	else
    	{
    		int re = -1;
    		if(m==0)	re = (s2.equals(s3))?1:-1;
    		else if(n==0)	re = (s1.equals(s3))?1:-1;
    		else
    		{
    			int r1 = 0, r2 = 0;
    			if(s1.charAt(m-1) == s3.charAt(m+n-1))
    			{
    				if(m==1) r1=isInterleave("", s2, s3.substring(0,m+n-1), map);
    				else r1 = isInterleave(s1.substring(0,m-1), s2, s3.substring(0,m+n-1), map);
    			}
    			if(s2.charAt(n-1) == s3.charAt(m+n-1))
    			{
    				if(n==1) r2=isInterleave(s1, "", s3.substring(0,m+n-1), map);
    				else r2 = isInterleave(s1,s2.substring(0,n-1), s3.substring(0,m+n-1), map);
    			}
    			if(r1==1 || r2==1)
    				re = 1;
    			else
    				re = -1;
    		}
    		map[m][n] = re;
    	}
    	return map[m][n];
    }

    public boolean isInterleave(String s1, String s2, String s3)
    {
    	int m = s1.length();
    	int n=s2.length();
    	if(m==0) return s2.equals(s3);
    	if(n==0) return s1.equals(s3);
    	int[][] map = new int[m+1][n+1];
    	int re = isInterleave(s1, s2, s3, map);
    	return  re== 1;
    }
}

====

linear space solution

  public boolean isInterleave(String s1, String s2, String s3)
  {
    char[] a = s1.toCharArray(), b = s2.toCharArray(), c = s3.toCharArray();
    int m = a.length, n= b.length;
    if(m==0) return s2.equals(s3);
    if(n==0) return s1.equals(s3);
    if(m+n!=c.length) return false;

    boolean[] re = new boolean[n+1];
    re[0] = true;
    for(int i=1;i<=n;i++)
    {
      re[i] = re[i-1] & (b[i-1]==c[i-1]);
    }
    for(int i=0;i<m;i++)
    {
      for(int j=0;j<=n;j++)
      {
        if(j!=0)
        {
          boolean r = false;
          if(a[i]==c[i+j]) r |= re[j];
          if(b[j-1] == c[i+j]) r|= re[j-1];
          re[j] = r;
        }
        else
        {
          re[j] = re[j] & (a[i]==c[i]);
        }
      }
    }
    return re[n];
  }

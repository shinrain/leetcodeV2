DivideTwoIntegers

Divide two integers without using multiplication, division and mod operator.

---

public class Solution {
    public int divide(int dividend, int divisor) {
        
        if(dividend == 0) return 0;
        if(divisor == 0) return Integer.MAX_VALUE;

        long d1 = (long)dividend;
        long d2 = (long) divisor;
        int flg  = 0;
        if(d1 < 0){ d1=-d1; flg++; }
        if(d2  <0) { d2 = -d2; flg++; }
        if(d2>d1) return 0;
        if(d2==1) return (int)((flg%2==0)?d1:-d1);

        long ret = d2;
        int m = 1;
        while(ret<=d1)
        {
        	if(ret == d1) return (flg%2==0)?m:-m;
        	ret = ret<<1; m = m<<1;
        }
        ret=ret>>1; m=m>>1;
        long re = m+divide((int)(d1-ret),(int)d2);
        return  (int)((flg%2==0)?re:-re);

    
    }
}

===

Only use bit operator solution:

    int add(int x, int y)
    {
        while(x!=0)
        {
            int c = x&y;
            y^=x;
            x=c<<1;
        }
        return y;
    }

    int minus(int x, int y)
    {   

        return add(x, add(~y,1));

    }
    public int divide(int dividend, int divisor)
    {
        if(divisor == 0) return Integer.MAX_VALUE;
        if(dividend == 0) return 0;
        if(divisor == 1) return dividend;
        if(divisor == -1) return -dividend;
        long d1 = (long)dividend, d2 = (long)divisor;
        int neg = 0;
        if(dividend<0)
        {
            d1 = -d1; neg++;
        }

        if(divisor<0)
        {
            d2=-d2; neg++;
        }

        if(d1<d2) return 0;
        if(d1==d2) return (neg%2==1)?(-1):1;

        int m = 1;
        long res = d2;

        while(res<d1)
        {
            m<<=1;
            res<<=1;
        }

        if(res==d1) return (neg%2==1)?(-m):m;

        int re = divide( minus((int)d1,(int)(res>>1)), (int)d2 );
        re+=(m>>1);
        return (neg%2==1)?(-re):re;
    }
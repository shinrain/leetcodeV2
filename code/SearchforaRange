SearchforaRange

Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

---

public class Solution {
	public int searchLeft(int[] A, int target)
	{
		int n = A.length;
		int re = -1;
		int l = 0, r = n-1;
		while(l<=r)
		{
			int mid = l+(r-l)/2;
			if(A[mid] == target)
			{
				re = mid;
				r = mid-1;
			}
			else if(target < A[mid]) r = mid-1;
			else l = mid+1;
		}
		return re;
	}

	public int searchRight(int[] A, int target)
	{
		int n = A.length;
		int re = -1;
		int l = 0, r = n-1;
		while(l<=r)
		{
			int mid = l+(r-l)/2;
			if(A[mid] == target)
			{
				re = mid;
				l = mid+1;
			}
			else if(target < A[mid]) r = mid-1;
			else l = mid+1;
		}
		return re;
	}

    public int[] searchRange(int[] A, int target)
    {
    	int n = A.length;
    	int left = searchLeft(A, target);
    	int right = searchRight(A, target);
    	int[] re = {left, right};
    	return re;
    }
}
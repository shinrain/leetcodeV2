Permutations

Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
---
public class Solution {
    public static boolean nextPerm(int[] num)
    {
        int n=num.length;
        if(n==0) return false;
        for(int i=n-2; i>=0; i--)
        {
            if(num[i]<num[i+1])
            {
                for(int j=n-1;j>i;j--)
                {
                    if(num[j]>num[i])
                    {
                        int t = num[i];
                        num[i] = num[j];
                        num[j] = t;
                        i = i+1; j = n-1;
                        while(i<j)
                        {
                            t = num[i];
                            num[i] = num[j];
                            num[j] = t;
                            i++; j--;
                        }
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> re = new ArrayList<List<Integer>>();
        int n = num.length;
        if(n==0) return re;
        List<Integer> r = new ArrayList<Integer>();
        if(n==1)
        {
            r.add(num[0]);
            re.add(r);
            return re;
        }
        Arrays.sort(num);
        for(int i:num)
        {
            r.add(i);
        }
        re.add(r);
        while(nextPerm(num))
        {
           r = new ArrayList<Integer>(); 
            for(int i:num)
            {
                r.add(i);
            }
            re.add(r);
        }
        return re;
    }
}
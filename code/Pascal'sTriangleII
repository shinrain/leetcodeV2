Pascal'sTriangleII

Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space
---

public class Solution {
    public List<Integer> getRow(int rowIndex) {

     	List<Integer> re = new ArrayList<Integer>();
     	if(rowIndex<0) return re;

     	int n = rowIndex+1;

     	int[] a = new int[n];
     	a[0]=1;
     	for(int i=1;i<n;i++)
     	{
     		for(int j=i;j>=0;j--)
     		{
     			if(j==0 || j==i) a[j] = 1;
     			else
     			{
     				a[j] += a[j-1];
     			}
     		}
     	}
     	for(int i:a)
     		re.add(i);
     	return re;
    
    }
}

====

Another solution:

    public List<Integer> getRow(int rowIndex) {
        List<Integer> re = new ArrayList<Integer>();
        int n = rowIndex;
        if(n<0) return re;
        if(n==0)
        {
            re.add(1);
            return re;
        }
        
        List<Integer> prev = new ArrayList<Integer>();
        prev.add(1);
        for(int i=0;i<n;i++)
        {
            re = new ArrayList<Integer>();
            int carry = 0;
            for(int in:prev)
            {
                re.add(carry+in);
                carry = in;
            }
            re.add(1);
            prev =re;
        }
        return re;
    }
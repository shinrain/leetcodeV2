4Sum

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

----


public class Solution {
    public List<List<Integer>> fourSum(int[] num, int target) {

		List<List<Integer>> re = new ArrayList<List<Integer>>();
		int n = num.length;
		if(n<4) return re;

		Arrays.sort(num);
		for(int i=0;i<n;i++)
		{
			if(i!=0 && num[i-1]==num[i]) continue;

			for(int j=i+1; j<n;j++)
			{
				if(j!=i+1 && num[j-1]==num[j]) continue;

				int k = j+1, v =n-1;
				while(k<v)
				{
					int res = num[i] + num[j] + num[k]+num[v];
					if(res==target)
					{
						List<Integer> list = new ArrayList<Integer>();
						list.add(num[i]); list.add(num[j]); list.add(num[k]); list.add(num[v]);
						re.add(list);
						k++; v--;
						while(k<v && num[k]==num[k-1]) k++;
						if(k==v) break;
						while(k<v && num[v]==num[v+1]) v--;
						if(k==v) break;
					}
					else if(res>target)
					{
						v--;
						while(k<v && num[v]==num[v+1]) v--;
						if(k==v) break;
					}else
					{
						k++;
						while(k<v && num[k]==num[k-1]) k++;
						if(k==v) break;
					}
				}
			}
		}
		return re;
    }
}

---
CLeaner solution

public class Solution {
    public List<List<Integer>> fourSum(int[] num, int target) {

		int n = num.length;

		List<List<Integer>> re = new ArrayList<List<Integer>>();
		if(n<4) return re;

		Arrays.sort(num);

		for(int i=0;i<n;i++)
		{
			if(i!=0 && num[i] == num[i-1]) continue;
			
			for(int j = i+1; j<n; j++)
			{
				if(j!=i+1 && num[j] == num[j-1]) continue;

				int k = j+1, v = n-1;
				while(k<v)
				{
					if(k!=j+1 && num[k] == num[k-1]) k++;
					else if(v!=n-1 && num[v] == num[v+1]) v--;
					else
					{
						int sum = num[i]+num[j]+num[k]+num[v];
						if(sum==target)
						{
							List<Integer> rr  = new ArrayList<Integer>();
							rr.add(num[i]); rr.add(num[j]); rr.add(num[k]); rr.add(num[v]);
							re.add(rr);
							k++; v--;
						}
						else if(sum<target) k++;
						else v--;
					}
				}
			}
		}
		return re;
    }
}



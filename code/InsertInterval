InsertInterval

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

---

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {


    	int n = intervals.size();
    	if(n==0)
    	{
    		intervals.add(newInterval);
    		return intervals;
    	}

    	List<Interval> re = new ArrayList<Interval>();
    	boolean flg = false;
    	for(int i = 0;i<n;i++)
    	{
    		Interval in = intervals.get(i);
    		if(flg || in.end<newInterval.start)
    		{
    			re.add(in);
    		}
    		else if(newInterval.end < in.start)
    		{
    			re.add(newInterval);
    			re.add(in);
    			flg = true;

    		}
    		else if(newInterval.start <= in.start)
    		{
    			if(newInterval.end<in.end)
    			{
    				newInterval.end = in.end;
    			}
    		}else
    		{
    			if(newInterval.end <= in.end)
    			{
    				re.add(in);
    				flg = true;
    			}
    			else
    			{
    				newInterval.start = in.start;
    			}
    		}
    	}
    	if(!flg) re.add(newInterval);
    	return re;
    
    
    }
}

===

lgn solution:

    int findEnd( List<Interval> itv, int l, int r, int end )
    {
        if(l>r) return l;
        int re  = -1;
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(end < itv.get(mid).start)
            {
                r = mid-1;
            }
            else
            {
                re = mid;
                l = mid+1;
            }
        } 
        return re;
    }

    int findStart( List<Interval> itv, int l, int r, int start )
    {
        if(l>r) return r;

        int re = -1;
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            int midEnd = itv.get(mid).end;
            if(start > midEnd)
            {
                l = mid+1;
                re = mid+1;
            }
            else if(start <= midEnd)
            {
                re = mid;
                r = mid-1;
            }
        }
        return re;
    }

    public List<Interval> insert(List<Interval> intervals, Interval newInterval)
    {
        int n = intervals.size();
        if(n==0) 
        {
            intervals.add(newInterval);
            return intervals;
        }
        else if(newInterval.start >intervals.get(n-1).end)
        {
            intervals.add(newInterval);
            return intervals;
        }
        else if(newInterval.end < intervals.get(0).start)
        {
            intervals.add(0, newInterval);
            return intervals;
        }
        else
        {
            int start = newInterval.start, end = newInterval.end;

            int left = findStart(intervals, 0, n-1, newInterval.start);
            int right = findEnd(intervals, 0, n-1, newInterval.end);


            if(left <=right)
            {
                

                Interval cur = intervals.get(left);
                cur.start = Math.min(intervals.get(left).start, start);
                cur.end = Math.max(intervals.get(right).end, end);
                for(int i=left+1; i<=right; i++)
                    intervals.remove(left+1);
            }
            else
            {
                intervals.add(left, newInterval);
            }
            return intervals;
        }
    }
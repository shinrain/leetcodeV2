CombinationSum

Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 

---

public class Solution {
 	public static void combinationSum(int[] candidates, int ind, int target, List<List<Integer>> re, List<Integer>r) 
	{

		if(target == 0)
		{
			re.add(new ArrayList<Integer>(r));
		}
		if(target <=0) return;

		if(ind>=candidates.length) return;

		int val = candidates[ind];

		combinationSum(candidates, ind+1, target, re, r);

		int siz = r.size();
		while(target>=0)
		{
			r.add(val);
			target -= val;
			combinationSum(candidates, ind+1, target, re, r);
		}
		if(r.size() > siz)
		{
			for(int i = r.size()-1; i >= siz; i--)
				r.remove(i);
		}
	}

    public static List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> re = new ArrayList<List<Integer>>();
        int n = candidates.length;
        if(n==0) return re;

        if(target == 0)
        	re.add(new ArrayList<Integer>());
        Arrays.sort(candidates);

       	combinationSum(candidates, 0, target, re, new ArrayList<Integer>());
       	return re;
    }
}
AddTwoNumbers

You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

---

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        if(l1==null) return l2;
        if(l2==null) return l1;
        ListNode newHead = null, tail =null;
        int carry = 0;
        while(l1!=null && l2!=null)
        {
        	int re = l1.val+l2.val+carry;
        	carry = re/10;
        	if(carry!=0)
        		re %= 10;
        	ListNode cur = new ListNode(re);
        	if(newHead == null)
        	{
        		newHead = cur; tail = cur;
        	}else
        	{
        		tail.next = cur;
        		tail = cur;
        	}
        	l1=l1.next; l2=l2.next;
        }

        while(l1!=null)
        {
        	int re = l1.val+carry;
        	carry = re/10;
        	if(carry!=0) re%=10;
        	ListNode cur = new ListNode(re);
        	tail.next = cur;
        	tail = cur;
        	l1=l1.next;
        }
        while(l2!=null)
        {
        	int re = l2.val+carry;
        	carry = re/10;
        	if(carry!=0) re%=10;
        	ListNode cur = new ListNode(re);
        	tail.next = cur;
        	tail = cur;
        	l2=l2.next;
        }
        if(carry!=0)
        	tail.next = new ListNode(carry);
        return newHead;
    
    }
}
DecodeWays

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

---
Cleaner way:

  boolean valid(String s)
  {
      int n = s.length();
      if(n!=1 && n!=2) return false;
      try
      {
        int val = Integer.parseInt(s);
        if(val>=0 && val <27)
        {
            if(val==0 && n==2) return false;
            return true;
        }
      }
      catch(Exception o)
      {}
      return false;

  }
  public int numDecodings(String s)
  {
      int n = s.length();
      if(n==0) return 0;

      int[] re = new int[n];
      for(int i=0;i<n;i++)
      {
            int rr = 0;
            if(valid(s.substring(i)))
            {
                if(i==0) rr++;
                else rr+=re[i-1];
            }
            if(i-1>=0 && valid(s.substring(i-1)))
            {
                if(i-1==0) rr++;
                else rr+=re[i-2];
            }
            re[i]=rr;
      }
      return re[n-1];
  }

---
public class Solution {
    
    public boolean validate(String s){
        int n = s.length();
        if(n!=1 && n!=2) return false;

        try
        {
            int val = Integer.parseInt(s);
            if(val >0 && val <27)
            {
                if(n==1 || s.charAt(0)!='0') return true;
            }
        }
        catch(Exception o)
        {}
        return false;
    }

    public int numDecodings(String s, int[] map)
    {
        int n = s.length();
        if(n==0) return 1;
        
        if(map[n-1]!=-1) return map[n-1];
        
        int re = 0;
        if(validate(s.substring(n-1)))  re = numDecodings(s.substring(0, n-1), map);
        if(n-2>=0 && validate(s.substring(n-2))) re+=numDecodings(s.substring(0, n-2), map);
        map[n-1] = re;
        return re;
    }
    public int numDecodings(String s) {
        int n = s.length();
        if(n==0) return 0;
        int[] map = new int[n];
        for(int i=0;i<n;i++)
            map[i] = -1;
        return numDecodings(s,map);
    }
}
SingleNumberII

Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
---

Tricky solution:

    public int singleNumber(int[] A) {
        int n = A.length;
        int one = 0, two =0, three=0;
        for(int i:A)
        {
            two |= one&i;
            one ^= i;
            three = one&two;
            one&=~three;
            two&=~three;
        }
        return one;
    }


===
public class Solution {
    public int singleNumber(int[] A) {
        int n = A.length;
        if(n==1) return A[0];
        if(n==0 || n%3!=1) return 0;
        
        int re=0;
        for(int i=0;i<32;i++)
        {
            int count = 0;
            for(int j=0; j<n; j++)
            {
                if((A[j] & (1<<i))!=0) count++;
            }
            if(count%3!=0) re = re|(1<<i);
        }
        return re;
    }
}
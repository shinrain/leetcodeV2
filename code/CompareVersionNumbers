Compare two version numbers version1 and version1.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37




public class Solution {
    public int compareVersion(String version1, String version2) {
    	int a=0, b=0;
        int m=version1.length(), n=version2.length();
        if(m==0 && n==0) return 0;
        int i=0, j=0;
        while(i<m)
        {
            if(version1.charAt(i)=='.') break;
            i++;
        }
        while(j<n)
        {
            if(version2.charAt(j)=='.') break;
            j++;
        }
        if(i>0) a=Integer.parseInt(version1.substring(0,i));
        if(j>0) b=Integer.parseInt(version2.substring(0,j));
        if(a!=b)
        {
            return (a<b)?-1:1;
        }
        if(i<m && version1.charAt(i)=='.') i++;
        if(j<n && version2.charAt(j)=='.') j++;
        return compareVersion(version1.substring(i), version2.substring(j));
    }
}

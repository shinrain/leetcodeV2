PathSumII

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

===

public class Solution {
    public void pathSum(List<List<Integer>> result, List<Integer> re, TreeNode root, int sum) 
    {
        if(root == null) return;
        if(root.left == null && root.right == null && root.val == sum)
        {
            List<Integer> rr = new ArrayList(re);
            rr.add(root.val);
            result.add(rr);
            return;
        }
        int siz = re.size();
        re.add(root.val);
        pathSum(result, re, root.left, sum-root.val);
        pathSum(result, re, root.right, sum-root.val);
        re.remove(siz);
    }

    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if(root == null) return result;
        
        List<Integer> re = new ArrayList<Integer>();
        pathSum(result, re, root, sum);
        return result;
    }
}
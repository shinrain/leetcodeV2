ValidPalindrome

Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

For example,
"A man, a plan, a canal: Panama" is a palindrome.
"race a car" is not a palindrome.

Note:
Have you consider that the string might be empty? This is a good question to ask during an interview.

For the purpose of this problem, we define empty string as valid palindrome.

---
public class Solution {
    public int valid(char c){
        if(c == ' ') return -1;
        
        int key = c-'a';
        if(key>=0 && key<=25) return key;
        key = c-'A';
        if(key>=0 && key<=25) return key;
        key = c-'0';
        if(key>=0 && key<=9)
        {
            key+=30;
            return key;
        }
        return -1;
    }

    public boolean isPalindrome(String s) {
        int n = s.length();
        if(n<=1) return true;
        
        char[] c = s.toCharArray();
        int l = 0, r = n-1;
        while(l<=r)
        {
            int first = -1;
            while(l<=r)
            {
                first = valid(c[l]);
                if( first == -1) l++;
                else break;
            }
            if(l>r) break;
            
            int second = -1;
            while(l<=r)
            {
                second = valid(c[r]);
                if(second == -1) r--;
                else break;
            }
            if(l>r) break;
            
            if(first!=second) return false;
            l++;
            r--;
        }
        return true;
    }
}

==

char valid(char c)
{
    if( c>='0' && c<='9') return c;

    if(c>='a' && c<='z') return c;
    
    if(c>='A' && c<='Z') return (char)(c+'a'-'A');
    
    return '.';
}

public boolean isPalindrome(String s)
{
    int l=0, r = s.length()-1;
    while(l<r)
    {
        char c1 = valid(s.charAt(l));
        char c2 = valid(s.charAt(r));
        if(c1 == '.') l++;
        
        if(c2=='.') r--;
        
        if(c1!='.' && c2!='.')
        {
            if(c1!=c2) return false;
            l++; r--;
        }
    }
    return true;
}
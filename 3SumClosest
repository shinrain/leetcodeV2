3SumClosest

Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
---

public class Solution {
    public int threeSumClosest(int[] num, int target) {
      

		int n = num.length;
		if(n==0) return 0;
		if(n==1) return num[0];
		if(n==2)
		{
			int re = num[0];
			re = Math.abs(re-target)<Math.abs(num[1]-target)?re:num[1];
			re = Math.abs(re-target)<Math.abs(num[1]+num[0]-target)?re:(num[0]+num[1]);
			return re;
		}

		int diff = Integer.MAX_VALUE;
		int re = 0;
		Arrays.sort(num);
		for(int i=0;i<n;i++)
		{
			if(i!=0 && num[i-1] == num[i]) continue;
			else
			{
				int j = i+1, k = n-1;
				while(j<k)
				{
					while(j<k && j!=i+1 && num[j] == num[j-1]) j++;
					if(j==k) break;

					while(j<k && k!=n-1 && num[k] ==num[k+1]) k--;
					if(j==k) break;
					int sum = num[i]+num[j]+num[k];
					if( Math.abs(sum-target) < diff)
					{
						diff =Math.abs(num[i]+num[j]+num[k]-target);
						re  = num[i]+num[j]+num[k];
					}
					if(sum == target) return target;
					if(sum<target) j++;
					else k--;
				}
			}
		}
		return re;
    
    
    }
}
PalindromePartitioning

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
  ---
  public class Solution {
 	public static boolean valid(String s)
 	{
 		int n =s.length();
 		if(n<=1) return true;
 		if(s.charAt(0) == s.charAt(n-1)) return valid(s.substring(1,n-1));
 		return false;
 	}

	public static List<List<String>> partition(String s, HashMap<Integer, List<List<String>>> map)
	{
   		List<List<String>> re = new ArrayList<List<String>>();
   		int n = s.length();
   		if(n==0) return re;
   		if(map.containsKey(n)) return map.get(n);

   		for(int i=n-1;i>=0;i--)
   		{
   			if(valid(s.substring(i)))
   			{
   				List<List<String>> r = partition(s.substring(0,i),map);
   				if(r.size() == 0)
   				{
   					if(i==0)
   					{
   						List<String> rr = new ArrayList<String>();
   						rr.add(s);
   						re.add(rr);
   						continue;
   					}
   				}
   				else
   				{
   					for(List<String>l:r)
   					{
   						List<String> rr = new ArrayList<String>(l);
   						rr.add(s.substring(i));
   						re.add(rr);
   					}
   				}
   			}
   		}
   		map.put(n,re);
   		return re;
	}

	public static List<List<String>> partition(String s) {
        return partition(s, new HashMap<Integer, List<List<String>>>());
    }
}
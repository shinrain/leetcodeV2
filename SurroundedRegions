SurroundedRegions

Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
---

public class Solution {
 	static void dfs(char[][] board, int i, int j){
 		board[i][j] = 'D';
        int m = board.length;
        int n = board[0].length;
 		if(i-1>=0 && board[i-1][j]=='O')
 			dfs(board, i-1, j);
 		if(j-1>=0 && board[i][j-1]=='O')
 			dfs(board, i, j-1);
 		if(i+1<m && board[i+1][j]=='O')
 			dfs(board, i+1, j);
		if(j+1<n && board[i][j+1]=='O')
 			dfs(board, i, j+1);

 	}

      void solve(char[][] board) {
        
        int m = board.length;
        if(m==0) return;

        int n = board[0].length;
        if(n==0) return;

        for(int i=0; i<n; i++)
        {
        	if(board[0][i] =='O')
        		dfs(board, 0, i);
        }

        for(int i=0; i<m; i++)
        {
        	if(board[i][n-1] =='O')
        		dfs(board, i, n-1);
        }

        for(int i=n-1; i>=0; i--)
        {
        	if(board[m-1][i] =='O')
        		dfs(board, m-1, i);
        }
        for(int i=m-1; i>=0; i--)
        {
        	if(board[i][0] =='O')
        		dfs(board, i, 0);
        }
        for(int i=0;i<m;i++)
        	for(int j=0;j<n;j++)
        		if(board[i][j]=='D')
        			board[i][j] = 'O';

    }
}
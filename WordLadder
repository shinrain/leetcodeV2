WordLadder

Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

---
public class Solution {
    public int ladderLength(String start, String end, Set<String> dict) {

    	int n = start.length();
    	if(end.length()!=n) return 0;
    	if(start.equals(end)) return 1;

    	HashSet<String> cur = new HashSet<String>();
    	cur.add(start);
        dict.remove(start);
    	boolean found = false;
    	int re = 1;

    	while(!found)
    	{
    		re++;
    		if(cur.size()==0) return 0;
    		HashSet<String> next = new HashSet<String>();
    		for(String s:cur)
    		{
    			char[] c = s.toCharArray();
    			for(int i=0;i<n;i++)
    			{
    				char val = c[i];
    				for(char cc = 'a';cc<='z';cc++)
    				{
    					c[i] = cc;
    					String str = new String(c);
    					if(str.equals(end)) return re;
    					if(dict.contains(str) && !next.contains(str))
    					{
    						next.add(str);
    					}
    				}
    				c[i] = val;
    			}
    		}
    		for(String ss:next)
    		{
    			dict.remove(ss);
    		}
    		cur = next;
    	}
    	return re;
    
    }
}
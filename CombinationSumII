CombinationSumII

Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 
----

public class Solution {
	public static void combinationSum2(List<List<Integer>> re, List<Integer> r, int[] num, int ind, int target)
	{
		if(target == 0 && r.size()!=0)
		{
			List<Integer> rr = new ArrayList<Integer>(r);
			re.add(rr);
			return;
		}
        if(ind >= num.length || target < num[ind]) return;

		int n = ind;
		int val = num[ind];
		for(;n<num.length && num[n] == val;n++);
		int sum = 0;
		int siz = r.size();
		
		combinationSum2(re, r, num, n, target);
		for(int i=ind; i<n;i++)
		{
			sum+=val;
			r.add(val);
			combinationSum2(re, r, num, n, target-sum);
		}
		for(int i=r.size()-1; i>=siz; i--)
		    r.remove(r.size()-1);
	}
    public static  List<List<Integer>> combinationSum2(int[] num, int target) {
        List<List<Integer>> re = new ArrayList<List<Integer>>();
        int n = num.length;
        if(n==0) return re;

        List<Integer> r = new ArrayList<Integer>();
        Arrays.sort(num);

        combinationSum2(re, r, num, 0, target);
        return re;
    }
}
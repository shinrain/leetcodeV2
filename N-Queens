N-Queens

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]---

public class Solution {
 	public static boolean valid(int[] a, int k){
 		for(int i=0;i<k;i++)
 		{
 			if(a[k] == a[i] || Math.abs(i-k) == Math.abs(a[i] - a[k])) return false;

 		}
 		return true;
 	}

 	public static void solveNQueens(int n, int k, int[] a, List<int[]> re)
 	{
 		if(k==n)
 		{
 			int[] aa = new int[n];
 			for(int i=0;i<n;i++)
 			{
 				aa[i] = a[i];
 			}
 			re.add(aa);
 			return;
 		}

 		for(int i=0;i<n;i++)
 		{
 			a[k]=i;
 			if(valid(a,k))
 				solveNQueens(n, k+1, a, re);
 		}
 	}

    public static List<String[]> solveNQueens(int n)
    {
    	List<String[]> re = new ArrayList<String[]>();

    	if(n==0) return re;
    	if(n==1){ 
    		String[] r_str = new String[n];
    		r_str[0] = "Q";
    		re.add(r_str);
    		return re;
    	}

    	int[] a = new int[n];
    	List<int[]> r = new  ArrayList<int[]>();
    	solveNQueens(n,0,a,r);

    	for(int i=0; i<r.size(); i++)
    	{
    		String[] r_str = new String[n];
    		for(int j=0;j<n;j++)
    		{
    			String rr = "";
    			for(int k =0; k<n; k++)
    			{
    				if( r.get(i)[j] == k)
					{
						rr+="Q";
					}
    				else rr+=".";
    			}
    			r_str[j] = rr;
    		}
    		re.add(r_str);
    	}
    	return re;
    }
}
电面 1
国人大哥，应该有点放水
1) fabanacia，期待o(lgn)解法,但O(n)也行
2) generate all possible paretheses, leetcode原题，会让分析最优/平均时间，我
只知道worse case 是O(n^2)

onsite1 
behavior: 1)有什么跟同事意见冲突的案例，怎么解决 
2) 以前做过的项目如果现在再做会有什么不同/改进
3）divide and mod，但不能用/或者%，基本也是leetcode原题了

onsite2
system desgin: 因为我是kernel背景，让我用mutex,cv实现一个semephor，说先考虑
单核，然后拓展到多核，但我只写了单核的就没时间了，不知道多核的会有什么不同，
要求code compilable，MD三哥从一进来就没好脸色，此轮negative

onsite3:
1) 给你10g文件，1g内存，数总共有多少个不同的数，答案是用bit来记录数字，总共
4b个interger,最多用0.5gb来记录，follow up是如果只有400m怎么办，答案是把数字
hash一下或者说scan文件多次，每次取尾数bits不一样的数，不用code
2) read file up to 4K, 也是老题了
3) 求平方根，基本也是leetcode原题，但给的数是double，这样如果给的n是小于1的
数，初始的right就得取1而不是n

onsite4:
也是kernel组的三哥，先上来问了btree跟bst的区别，btree里放多少个index怎么决定
，答案是disk block size / 每个index的长度，如果是内存的话就用cache line size除
还有vm的，我也不大懂，好像是说如何解决内存的fagement问题，如何把多个分开的小
片段移到一起，用到了madvise这个syscall,还问为什么返回一个新的page之前要清零
，答案是因为page上可能是别的process的内容
code题是decode，比如说1 → 1, 2 -- > 01, 3 → 001, 4 → 0001,....，给你一个
无限的stream，要求输出数字，应该没啥难度，follow up是如何优化，我给的答案是
map，就是依次取char而不是bit，然后把char的值对应到string上，他说cpu还有一个
instruction可以直接查询此个char有多少个leading zero


=======

bool isPalindrome(string s);

A palindrome is a string that is the same when read backwards or forwards.  
For example, "aba", "abba", and "racecar" are all palindromes.
You will implement a method to determine whether a string is a palindrome.

- Palindromes are case insensitive, so "Aba" is a palindrome.
- Palindromes ignore non a-z characters, so "a0ba" and "a- #&#b*b-a" are 
palindromes
- The empty string "" and strings with no letters, e.g. "123" are not 
palindromes.

====


题目以前见过，就是给一些不重叠的interval，然后设计一个数据结构来存储，实现 插入interval和 find一个value 两个函数，前者碰到重叠就return false，后者碰到所在的interval返回。


这个我记得就是用BST做的。

有一个bug，就是插入的时候给空指针 n = new Node(c),这么做了，被指出了，还是基
础不扎实啊，可能以前都是链表或者用递归做的，就从来没发现这个问题。应该说明下
还可以用递归做的。

中间讨论了一下维护min和max变量是否必要，我说主要是在val超出范围的时候直接判断，他说那其实interval中间也有空当。我就说那就只有两端的时候，会比较有用，而且我这个办法维护min和max每次都要做一次，应该有更好的。对average case是没有用的。

最后问了下time cost，就是O(lgn)和o(n)，分别对应average和worst，他说怎么保证balanced，就说就可以了，我说可以用红黑树或者AVL，或者先找中位数插入（后来一想应该是先排序）

用sorted array行不行，与BST比较优缺点（前者没overhead，但是无法动态插入和删除）。似乎他还挺满意。

让我问问题之后就欢快的结束了。



[192, 320) [384, 512) [512, 640) [1024, 1152) // 128

// Fixed size, non-overlap

class Interval {
  /* feel free to add or modify */
public:
  int start;
  int end;
};

class Store{
 /* feel free to add or modify */
public:
 bool insert(const Interval *c);
 const Interval * find(int val);
};

class Node{

public:
	const Interval intv;
	Node *left;
	Node *right;
    
	Node(const Interval *c):intv(c->start,c->end){
    	left = right = NULL;
	}
    
}
    
class Store{

public:
	Node *root;
	int minv;
	int maxv;
    
	Store(){
    	root = NULL;
    	minv = numeric_limit<int>::max();
    	maxv = numeric_limit<int>::min();
	}
    
	bool insert(const Interval *c){
    	if(!root){
        	root = new Node(c);
        	minv = c->start;
        	maxv = c->end -1;
        	return true;
    	}
   	 
    	int start = c->start;
    	int end = c->end;
   	 
    	Node *n = root;
    	Node *parent = NULL;
   	 
    	while(n!= NULL){
       	 
        	parent = n;
       	 
        	if( start >= n->intv->end)
            	n = n->right;
        	else if( end <= n->intv->start )
            	n = n->left;
        	else
            	return false;
    	}
   	 
	//一开始这里没用parent，直接写n = new Node(c)，被指出错误了，其实就是空指针没法去新建一个东西，还是基础不扎实就出现这种错误。应该不用parent的，不过他说没问题。

    	if( start >= parent->intv->end)
        	parent->right = new Node(c);
    	else if( end <= parent->intv->start )
        	parent->left = new Node(c);
   	 
    	maxv = max(n->end -1,maxv);
    	minv = min(n->start,minv);
    	 
    	return true;
	}
    
	Interval  find(int val){
   	 
    	if( val < minv || val > maxv)
        	return Interval(-1,-1);
   	 
    	Node *n = root;
   	 
    	while( n!= NULL){
        	if( val >= n->start && val < n->end)
            	return n->intv;
        	else if ( val < n->start )
            	n = n->left;
        	else if( val >= n->end )
            	n = n->right;
    	}
   	 
    	return Interval(-1,-1); // maybe not necessary;
   	 
 	}
}
    
===

题目是：
给A，B 2个array，里面都是integer，已经排好序了，由大到小，他们的长度都是N

现在从A和B里各选出一个数，总成一个sum，请返回前N个最大的sum

PriorityQueue<Integer> pq1= new PriorityQueue<Integer>(10, new Comparator<Integer>() {
public int compare(Integer x, Integer y) {
if (x < y) return 1;
if (x > y) return -1;
return 0;
}


=======

第一题的印象有点模糊了。。大概是给一个数组，然后有一些数是重复的，然后找到重
复最多的那个数，比如说 int input[]={3,7,4,3,6,1,3,6}，重复最多的数是3，这些3
的index分别是0 3 6，那么要求程序以相等的概率返回这3个index,
int computeIndex(int[] input);
33.3% return 0
33.3% return 3
33.3% return 6
当时因为叙述的比较绕，所以光题目就理解了半天，最后在他的提示下找到答案：先扫
第一遍，找到出现最多的那个数（比如3），然后写个random函数, 再扫第二遍，每次
遇到3就调用这个Random函数，若Random返回值大于一个阈值就返回当前的index。比如
这个函数可以是
bool ran(int size){
      if(random()*size<1)
           return true;
      return false;

}
叙述的不好，见谅！有问题请提问~

  
第二题是leetcode原题，Permutation，我用递归做完之后，又让分析算法复杂度，并
问了我在输入在多大的时候算法会崩，递归到多深会崩什么的，然后我扯到了操作系统
的堆栈大小什么的，感觉他不是很满意


====

double sqrt(double d)

Given a sequence of distinct integers, your program must remove as few 
elements as possible in order for the elements which are not removed to 
appear in ascending order.  If there is more than one way to do this, your 
program must print one solution, then print the number of all solutions.

Example.

Given   1 2 3 8 10 5 6 7 12 9 11 4 0 
Remove        8 10       12      4 0 
Remain  1 2 3      5 6 7    9 11       (ascending)


To form an ascending sequence, you must remove at least 5 elements. There is
  only one way to do it.

Solution: LIS. Should look into it. But nlgn not necessary.



=====

请教一道设计题：facebook的查找好友功能, 还有假设在一个服务器高峰时间，来的查
询量很大，你怎么handle?

1. Caching reading query
2. Kafka + storm

=====

题目很简单, 就是繁琐,career cup上有一道类似的,但是这个比那个更麻烦点

输入一个整数,输出他的英文读法
1 -> one
100 -> one hundred
500234 -> five hundred thousand two hundred thirty four
1232232 -> 1 million two hundred .....


====

1. 给两个类A和B
class A {
public void foo (A a) {
  ...
}
}
class B extends A {
public void foo (B b) {
  ...
}
}
问这么写会不会有问题

2. 关于Database的题，假如你执行
select * from employee
employee是一个table

但是返回错误说，这个table不存在什么的，但是现在已知存在这个table,问你可能是
什么原因。
完全没有思路，就说我也不知道。。。

3. 一种字母游戏这样的
给定四个位置 _,_,_,_
然后每个位置可以选5个candidates，然后问这些candidates最多可以组成多少个有效
的词，字典是给定的。

比如，
如果字典是 [cake, bike, fake]
我们可以这样选candidates
第一个位置可以选 b,c,f,e,d
第二个位置 i,a,o,p,e
第三个位置 k,m,w,q,a
第四个位置 e,g,h,k,l
那这些可以组成3个有效的词 cake, bike, fake.

但是如果，这样选每个位置的candidates
第一个位置可以选 z,c,v,b,y
第二个位置 i,a,o,p,e
第三个位置 k,m,w,q,a
第四个位置 e,g,h,k,l

只能组成一个有效的词就是bike.
这样就是第一种选candidates的方法比较好。

然后问你怎么选每个位置的candidates，最终可以让能组成的词最多。

Solution: 把所有4 letter长的单词建立trie 每个node加上wordCount 和 prefixCount， 每一层
选的时候以 wordCount+prefixCount为标准，选五个最大的

=======

Clone graph
onsite
1. 一个manager 先聊behavior， 然后做了一个小题
    isOneEditDistance 判断两个string是不是只差一个编辑距离。
2. 3Sum 变体，每个数字可以重复用。
3. System design设计手机上读取photo feeds的app。
    功能： 读取好友的最近图片
               阅览好友的相册
    要求： 满足功能的同时减少对手机的能耗。
4. (1) 一维度向量相乘。每个向量很长，billion个数字。
    (2) 多线程 reader 跟 writer 的经典问题。
加面
1. 求 LCA 两种情况，有parent结点跟没有parent的结点的情况都要回答。
2. search in rotated sorted array LC原题。
    decode ways LC原题

======

实现 int Read(int Size, char * buffer) using int Read4(char * buffer)

======

给一堆用户的登陆日志，要求输出各时间段内的在线用户数。

例子：
user1:
login_time: 0
logout_time: 1

user2:
login_time: 0
logout_time: 2

user3:
login_time: 1
logout_time: 3

输出：
[0 - 2): 2
[2 - 3): 1
[3 - infinite): 0

0 - 1不用输出，因为时间点0有2个在线用户，时间点1也有2个在线用户，在线用户数
没有变，所以不用输出。在时间点2在线用户数变为1，所以输出0 - 2: 2

完成函数：
struct Log
{
  float login_time;
  float logout_time;
};
void online_user(vector<Log> &logs);

Solution: 

class time
{
	int val;
	char prop; ( start or end )
}

1. Sort time according to val
2. scan time, when start: count++; when end: count --
3. output count when changed.

====

Implement a function char* readLine(); which returns single lines from a 
buffer. To read the buffer, you can makes use of a function int read(char* 
buf, int len) which fills buf with upto len chars and returns the actual 
number of chars filled in. Function readLine can be called as many times as 
desired. If there is no valid data or newline terminated string available, 
it must block. In order to block, it can use read function which in turn 
will block when it doesn't have anything to fill the buf.


====

第一题是isPalindrome，还稍微简化了下：考虑所有的字符，输入串长度不为0。
个人用两个"pointer" 做的，犯的第一个错误是在判断字符相等时莫名的加了return 
true..被指出来了。

第二题是整数除法，不能用/, %, *，简化条件：只考虑正整数，但要求返回string。
花了些时间，但最后更新dividend时忘了移位，应该是dividend -= (divisor << pos)
, 自己测的时候小慌，没找出来，最后才补上的。


=====

校招面的，只有一轮45分钟。第一题很水，特地问了会不会有border case之类的，面
试官是个烙印，说他只看正确性。写完后，他也没怎么看，直接就说下一题了。不知道
这是什么情况。第二题leetcode上得原题，求最大只包括0的子矩形。之前看过，先说
了个暴力的，然后说了一个比较好的算法，但是写的时候有个地方没想清，没写好，被
要求先写一个暴力的，写完后他说行了。然后就问我有什么问题问他了。。。是不是没
希望了。。。？

===

glassdoor
===================
edit distance

level traverse tree(高频）

1) Calculate the square root of a double（高频）

2) Given n intervals [si, fi], find the maximum number of overlapping 
intervals.

3) Print all the paths from root to every leaf in a binary tree.

4) Print the sum of all the numbers at every vertical level in a binary tree

5) Given a set of n jobs with [start time, end time, cost] find a subset so 
that no 2 jobs overlap and the cost is maximum ?

6) Given 1 trillion messages on fb and each message has at max 10 words, how
do you build the index table and how many machines do you need on the 
cluster to store the index table ?
total data = 1 trillion * 10 words * 6 bytes / word = 60TB = one small 
NetApp box
index by hashed userid ; will distribute traffic effectively across servers 
; cache active users recent messages in memory

mapreduce

return the value of a roman number given in a string

Given two string representations of binary numbers (e.g. "1001", "10") write
a function that adds them and returns the result as a string as well (e.g. 
"1011").

a) first, write a function to calculate the hamming distance between two 
binary numbers
(b) write a function that takes a list of binary numbers and returns the sum
of the hamming distances for each pair
O(n) solution is recore each position how many 1 and how many 0, and 
multiply them for each position and add together

combination(高频）
permutation , the k-th permutation 

You are given a string with each english character translated to its 
alphabetical position (e.g., the string "ABC" --> "123"). Provide a function
that, when provided the string as an argument, will return the maximum 
number of strings the encoded string could represent (for example, "123" 
could represent "ABC", "LC", or "AW").
kind of like DFS

Database design

FB Check In services

Getting maximum and minimun number was not difficult but getting less than n
comparison was tricky
sorted? bucket? radix?

BFS

strstr()


The second problem was another classic DP problem. Finding the sum of 1's in
a submatrix. I went on to describe the recurring relation for the 
subproblem in the linear case. She didn't want me to do that and she quickly
said the solution to the 2D case was a generalization of the 1D case.
seems is find the max sum submatrix, time O(n^3), space O(n^2) 2D version of
Kadane's

a palindrome for strings with symbols and spaces in them

finding all the anagrams in an array of strings

finding the number of ways a given score could be reached for a game with 3 
different ways of scoring (e.g. 3, 5 and 10 points). aka leetcode Climbing 
Stairs

printing a binary tree L-R, (from left to right?? level traversal?

and implementing a comparator function to sort files based on a certain 
naming convention.

regular_expression_match

graph traversal

Implement a LRU cache in C++.

Given a binary search tree, write an algorithm to find the kth smallest 
element 
inorder seach

binary search on a shifted array, find the offset (2) in log n
find the beginning of the array, if (right - left  <= 1) then return min(
left,right);

design newsfeed

write a json beautify

Given a vector of Nodes, each of which contain the start and end time of a 
meeting, find the maximum number of rooms one would have to book for the day
. 
seems is the max overlap: 1) sort based on start time 2) scan meeting one by
one, insert new meeting, and then scan the meetings in linked list, if they
stil valid for the new start time, then max++, otherwise clear them out
time should be O(n^2)

How would you query for all the Places near a given coordinate? The focus is
on how to scale this to a large number of places while keeping response 
time to within acceptable user expectacions.  

finding anagrams in a string.

Reverse a linked list

Identify if the words in a given sentence are in a built in dictionary.
===============================================



mitbbs
============
bubble sort
leetcode 电话号码
When will java destruct object. (automatic garbage collection for 
unused object that no reference points to it, finalize() method is called 
weh it decide to collect it)
8.    Java stuff: how to avoid other programmer from changing the function. 
(Final keyword)
What is the transient keyword.(indicate that a field should not be 
serialized.aka not persisted )
How to use stacks to simulate queue(two stacks)
lowest common ancestor(cc150 P233)
Given a linked list, say A->B->C, print it in reversed order. Time & 
space analysis. What if I want the original list not changed?(recursion) How
about 
multithreads call this functions simultaneously?(seems ok?)
怎么判断两个linkedlist meet(make the first linkedlist tail point to the head
of the second linkedlist, then become the find cycle problem, if just 判断
then loop two list then if the last element is the same then it will meet.)
有个矩阵，里面都是0和1，找最大的cluster，相邻或对角(BFS, search 1, then BFS
it, market visited point to #, get the areas, at the end revert # to 1)
longest increasing subsequence:

revert linkedlist(recussion and non-recussion)
leetcode sort color
两个list相加，优化代码
regular expression
given an array, find out the max sum of a set that each elements are non-
: ajacent.动态规划很简单，刚开始用了数组来存，发现两个变量滚动赋值就可以了
设计题，地图搜索，怎样设计index

====

Given a number N, write a program that returns all possible combinations of 
numbers that add up to N, as lists. (Exclude the N+0=N) 

For example, if N=4 return {{1,1,1,1},{1,1,2},{2,2},{1,3}}

===

如何不用recuisive的方法preorder遍历一个tree（tree 有多个不同的孩子）

===

Fb 设计题： timeline

====


implement linux command tail.

We will focus only on "-n" and "-f" options.

tail FILE 是显示打印文件最后10行。tail -n 5表示打印文件最后五行。

The -f option causes tail to not stop when end of file is
             reached, but rather to wait for additional data to be appended 
to
             the input. 

有两个concern，

文件可能很大，所以不能全部读入，问怎么解决。
文件可能大得超过了内存，问怎么读。

(2) Two cases for value of N (A) N is small to fit in memory (B) N is large 
to fit in memory

Please email your code and clear instructions to execute your program.

=======

前一周电面，电面的题目挺简单，第一题忘了，第二题是two sum，然后写3sum
我写了一个O(n^2)的3sum，然后面试官问我怎么能写到NlogN，但是想了很久都没有想
出来方法，然后面试结束后去wiki一查发现NlogN的方法不存在，应该是面试官记错了

一轮电面之后之后让去onsite
onsite是3轮面试，2轮coding加一轮的experience
coding的题目都很简单，第一个人先是问了我怎么做test，然后出了两题，第一题比较
两个string，返回一个int来表示第一个string大还是第二个string大，只要返回任意
的正数或者负数就行。比如a，ab，就返回一个负数，因为第二个string比第一个
string大
第二题是有这么一个class Contact，里面有一个String的name，和一个List<String>
装着email address，是这个Contact有的address，用一个list装着是因为一个人有可
能有多个email，现在给你an array of Contact，比如
#1 John [john@gmail.com]
#2 Mary [mary@gmail.com]
#3 John [john@yahoo.com]
#4 John [john@gmail.com, john@yahoo.com, john@hotmail.com]
#5 Bob [bob@gmail.com]
现在我们知道如果email address相同的话，那么就说明是同一个人，现在要做的是根
据这些email address，把同一个contact给group起来，生成一个List<List<Contact>>
，比如我们就可以知道#1，#3，#4是同一个人。注意不能根据名字来group，因为有可
能有相同名字的人，或者同一个人有可能有不同的名字来注册之类的。我给出了一个类
似graph的解法。时间不够，就没有写code，只是把逻辑解释了一遍。
第二个人也是出了两道题目，第一题是给两个string，判断其中一个string能否对其中
的一个字符通过一次的insertion或者一次deletion或者一次replacement变成另外一个
string，比如
cat cast True #第一个string通过一次insertion可以变成第二个string
cat at True #deletion
cat cot True #replacement
cat dog False
cat cat False #因为这两个string相同，不需要任何的操作，要返回false
第二题是找出factorial(n)中有多少个0，我跟他说我做过
第三个人大部分时间都是问的experience，问为什么Facebook，对Facebook的哪个
feature最喜欢，为什么喜欢，然后这个feature还有什么不足。之后让给他一个非常
specific的例子说当你和同事出现技术上的冲突的时候，应该怎么解决，问的特别细，
特别深入。之后让写一道题，是leetcode上的，linux里面的cd命令那题，就是给定你
当前的系统路径比如/a/b，然后你要cd到另外一个目录，给你cd的输入比如cd ../pq/.
/r，那么最后的路径应该就是/a/pq/r，要求输出最后这个路径

facebook总体都不难，我觉得最多是leetcode中等难度的题，但是我也听说不同的人的
难度会差别很大。做的时候前两个人还比较顺，但是最后一个人我都没有怎么用过太多
的facebook，也就在那里瞎扯，写code的时候还被指出了一个非常低级的bug，听说F对
bugfree的要求特别高，所以求bless啊求bless啊
--

====

两个tree,比较leaf nodes 是否相同。 如果完全一样，return true, 否则 false


===

刚结束不久的F家电面，跪的很干脆。
本人在国内工作6年，11月中旬决定尝试下US的机会，主要觉得30之前想出去看看，多
点可能性。于是开始找大神refer，刷leetcode，刷本版。
本来打算1月份开始面试，但F家的recruiter的动作很快，电话沟通后说就安排在这周
吧，否则放假了。这必须赞一个，同样是内推，其他家基本你不催，都没反应，当然也
明白一个只有国内经验且教育背景很弱的候选人，换做我也会没什么热情的。

早上9点电面，第一次电面非常紧张，刚开始就遇到问题，带了耳麦后对方声音特别小
，还好对方是native speaker，如果是三哥就哭了（recruiter，之前电话里不是说好
，会安排国人同胞的嘛。。。）

接着开始标准流程，面试官自我介绍，是做支付相关的。接着我介绍简历上的一个项目
，和他的工作有点相关，表达了兴趣。然后问了motivation，感觉不满意我的回答，最
后他说any way，开始coding吧。此时已经过了10min。

接着悲剧开始了，题目挺简单，最后理解了就是给一堆区间，找到距离原点最近的k个
区间。但开始没看懂题目，反复确认了几个例子后，确定这是top K。接着脑子开始抽
了，想如果start是负数，感觉没法用partition选top k start。就说对正负区间分别
排序，然后merge tow sorted list。反馈是排序开销太高了之类。
接着我还纠结在负数的问题，想了很长时间，说要不对正负区间分别做parition,然后
merge。。。反馈距离和正负无关啊，我才弄明白。
结果光给思路就用了快15min，更加紧张，脑子完全空拍了，在边界条件上卡了很久，
code又花了15min。。。
做完给他解释code，解释到一半，我自己发现一个边界条件的bug，赶紧说sorry然后
fix。他提了一个comments关于抽取函数以方便复用，当时只想着写完代码，确实没考
虑。
问曰怎么选比较的轴更好，我写的是开头结尾相加除2，问开头结尾一样怎么办？那选
前中后。问如果还一样？囧，我说那就选中位数或者min+max然后除2吧。他说OK。
最后他自言自语了一会，应该是在检查边界，然后说没问题。但是此时已经过了40min
了。。。就直接进入我提问环节了，问了支付系统安全性保障和在依赖第三方支付系统
需要注意的地方，他回答的挺认真，balabla了快10min。最后结束。

总结，跪的非常干脆。第一次海外电面确实非常紧张，和刷题时的感觉差别巨大。本来
联系了国内MS，想先刷个电面经验，结果fb安排的更快。Any way，还是自己准备不充
分，其他家电面在安排，估计1月，抓紧时间准备，用版上的话说，move on！


===

两道题目：
1. copy graph，coding完问复杂度，时间复杂度开始没答对。教训是刷题时一定要明
白复杂度等相关原理，不然很囧。

2. 假设在embed system上编程，不能malloc。给定一个int array，问如何实现
Linkedlist。
这题主要时间都花在讨论上，逐步明白她的要求是：实现insert,delete，且时空复杂
度都是O(1)
我回答为每个node申请3个数组元素，分别存储：data, next index,pre index。然后
使用free list维护空闲元素列表即可。由于交流问题，折腾了快20分钟。
最后时间不够，只让实现了insert。她觉得我假设做的太多，不满意。


====


题目都常规，具体如下
1) 两个有序数组，长度分别为2n, n，将第二个数组并入第一个
2) 一个无序数组，打印和为零的三元组

第一题是leetcode原题，也follow类似的解法，从后向前insert
第二题找出两个数和为target的变种，应该可以用sort做。不过当时给的是用map的解
法，把array value, array index存入map用于查询。

===

一个字符串找另一个字符串是否在内，不要求KMP;
求所有subsets;
copy graph，所有node都提供给你，不是leetcode的连通图copy；
还有个题说起来比较复杂但是做起来也很简单。

===
总共电面一轮，onsite3轮……半轮问resume和project，2.5轮问代码……算上电面，
总共面了9道，其中5道是leetcode原题，这里就不说了，刷好leetcode是关键吖……说
说剩下的4道吧……

1. median of integer stream. 没写代码，讲了下思路和数据结构……这题版上有讨
论过，非常感谢！ http://www.ardendertat.com/2011/11/03/programming-interview-que
2. 在一个x轴上，有很多矩阵，这些矩阵下面的那条横线跟x轴是重叠的……矩阵之间
可以部分重叠或者一个矩阵被另一个矩阵完全覆盖……要求输出最后图像的轮廓……不
知道描述清楚了没有…这题没写代码，讲了下思路……
3. 给了一堆开会时间, (si, ei), 开始时间和结束时间……判断是否可以只用一个会
议室满足所有会议.注意，(4,5), (5,6)……这个输入返回true……
4. 同样的一堆会议时间，返回最少需要多少间会议室.

===